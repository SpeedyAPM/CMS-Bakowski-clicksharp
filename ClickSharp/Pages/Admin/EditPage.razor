@attribute [Route(AppUrls.Admin.EN.EditPage)]
@attribute [Route(AppUrls.Admin.PL.EdytujStrone)]
@using TinyMCE.Blazor
@using System.Text
@inject ClickSharpContext dbContext
@using System.Text.RegularExpressions;


<h3>Add new or edit existing pages</h3>
<form>
    <div class="form-group">
        <label for="urlInput">Url</label>
        <input id="urlInput" type="text" @bind=currentPage.Url disabled=@isIndex class="form-control" />
    </div>
    <div class="form-group">
        <label for="titleInput">Title</label>
        <input id="titleInput" type="text" @bind=currentPage.Title class="form-control" />
    </div>
    <div class="form-group">
        <label for="descriptionInput">Description</label>
        <input id="descriptionInput" type="text" @bind=currentPage.Description class="form-control" />
    </div>
    <div class="form-group">
        <label for="pages">Page</label>
        <select id="pages" @onchange=LoadPage @bind-value=PageId @bind-value:event="oninput" class="form-control">
            <option value="">new page</option>
            @foreach (var item in pages)
            {
                <option value=@item.Id>@item.Title</option>
            }
        </select>
    </div>
</form>

<div>

    <p class="text-warning">@_errorMsg</p>

</div>



<div class="mt-5 mb-5 ms-auto me-auto">
    <Editor Conf="@editorConf" @bind-Value=currentPage.Content ScriptSrc="lib/tinymce/tinymce.min.js" />
</div>

<button @onclick=SaveContent class="btn btn-primary">Save</button>
<button @onclick=DeletePage disabled=@isIndex class="btn btn-danger">Delete</button>

@code {
    private string _errorMsg = string.Empty;
    private bool isIndex = false;
    private List<Page> pages = new();
    private int? pageId;
    private string? PageId
    {
        get
        {
            if (IdExist)
            {
                return pageId.ToString();
            }
            else
            {
                return null;
            }
        }
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                pageId = Int32.Parse(value);
                if (pageId == 1)
                {
                    isIndex = true;
                }
                else
                {
                    isIndex = false;
                }
            }
            else
            {
                pageId = null;
            }
        }
    }
    private bool IdExist => pageId != null;
    private PageModel currentPage = new();

    protected override void OnInitialized()
    {
        LoadEditor();
        Reload(true);

        base.OnInitialized();
    }

    private void Reload(bool firstInit)
    {

        if (dbContext.Pages != null)
        {
            pages = dbContext.Pages.ToList();
        }

        if (!firstInit)
            StateHasChanged();
    }

    private void SaveContent()
    {
        _errorMsg = string.Empty;
        int error = 0;
        try
        {
            string? title = currentPage.Title;
            string? description = currentPage.Description;
            string? url = currentPage.Url;
            string? content = $"{currentPage.Content}";

            error--;
            if (title == null || description == null || url == null || content == null)
                throw new Exception();

            error--;
            title = title.Trim();

            error--;
            description = description.Trim();

            error--;
            url = url.Replace(" ", "");

            error--;
            if (url.Length < 3)
                throw new Exception();

            error--;
            Regex reg = new Regex("^[a-zA-Z0-9-_ ]+");
            if (!reg.IsMatch(title))
                throw new Exception();

            error--;
            if (!reg.IsMatch(description))
                throw new Exception();

            error--;
            if (!Uri.IsWellFormedUriString(url, UriKind.RelativeOrAbsolute))
                throw new Exception();

            if (PageId == null)
            {
                error--;
                if (dbContext.Pages != null)
                {
                    error--;
                    List<Page>? dbPage = dbContext.Pages?.Where(x => x.Url == url).ToList();
                    if (dbPage != null && dbPage.Count == 0)
                    {
                        error--;
                        if (dbContext.Pages == null)
                            return;
                        dbContext.Pages.Add(
                            new Page
                                {
                                    Title = title,
                                    Description = description,
                                    Url = url,
                                    CreationTime = DateTime.UtcNow,
                                    Content = content
                                }
                        );
                        error--;
                        dbContext.SaveChanges();
                        currentPage = new();
                        PageId = null;
                        Reload(false);
                    }
                }
            }
            else
            {
                error--;
                Page? dbPage = dbContext.Pages?.FirstOrDefault(x => x.Id == pageId);
                if (dbPage != null)
                {
                    error--;
                    if (dbPage.Url == url)
                    {
                        error--;
                        dbPage.Title = title;
                        dbPage.Description = description;
                        dbPage.ModificationTime = DateTime.UtcNow;
                        dbPage.Content = content;
                        error--;
                        dbContext.SaveChanges();
                        currentPage = new();
                        PageId = null;
                        Reload(false);
                    }
                    else
                    {
                        error--;
                        List<Page>? dbPageTest = dbContext.Pages?.Where(x => x.Url == url).ToList();
                        if (dbPageTest != null && dbPageTest.Count == 0)
                        {
                            error--;
                            dbPage.Title = title;
                            dbPage.Description = description;
                            dbPage.Url = url;
                            dbPage.ModificationTime = DateTime.UtcNow;
                            dbPage.Content = content;
                            error--;
                            dbContext.SaveChanges();
                            currentPage = new();
                            PageId = null;
                            Reload(false);
                        }
                    }
                }
            }
            error = 1;
        }
        catch
        {
            _errorMsg = $"error_code: {error}";
        }

    }
    private void LoadPage()
    {
        try
        {
            if (IdExist)
            {
                Page? dbPage = dbContext.Pages?.FirstOrDefault(x => x.Id == pageId);
                if (dbPage != null)
                {
                    currentPage.Id = dbPage.Id;
                    currentPage.Title = dbPage.Title;
                    currentPage.Description = dbPage.Description;
                    currentPage.Content = dbPage.Content;
                    currentPage.Url = dbPage.Url;
                }
            }
        }
        catch { }
    }
    private void DeletePage()
    {
        try
        {
            if (IdExist && pageId != 1)
            {
                Page? dbPage = dbContext.Pages?.FirstOrDefault(x => x.Id == pageId);
                if (dbPage != null)
                {
                    List<Menu>? dbMenu = dbContext.Menu?.Where(x => x.PageId == pageId).ToList();
                    if (dbMenu != null && dbMenu.Count > 0)
                    {
                        foreach (var menuItem in dbMenu)
                        {
                            dbContext?.Menu?.Remove(menuItem);
                        }
                    }
                    dbContext.Pages?.Remove(dbPage);
                    dbContext.SaveChanges();
                    currentPage = new();
                    PageId = null;
                    Reload(false);
                }
            }
        }
        catch { }

    }
}

