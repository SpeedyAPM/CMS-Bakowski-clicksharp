@attribute [Route(AppUrls.Admin.EN.ImageUpload)]
@attribute [Route(AppUrls.Admin.PL.ZaladujObraz)]
@inject IConfiguration _configuration
@using ClickSharp.Helpers
@using System.Text
@using System.Text.RegularExpressions


<h3>Upload Images</h3>

<div class="row m-5">
    <InputFile OnChange="@LoadFiles" multiple />
</div>
<div class="d-flex">
    <button @onclick="@UploadSubmit" class="btn btn-primary btn-lg btn-block">Upload</button>
</div>

<div class="row mt-5">
    <h3>Select images you wish to remove</h3>
    @foreach (var img in images)
    {
        string url = $"{AppUrls.AppImages}/{img.Key}";
        string isActive = img.Value ? "border-dark" : "border-light";

        <figure class="col-xl-3 col-lg-6 col-12 figure">
            <img src="@url" alt="@img.Key" @onclick="() => MarkImage(img.Key)" class="figure-img img-fluid border border-5 @isActive rounded-3" />
            <figcaption class="figure-caption text-center text-break">@img.Key</figcaption>
        </figure>

    }
</div>
<div class="d-flex m-3">
    <button @onclick="@DeleteImages" class="btn btn-primary btn-lg btn-block">Delete Selected</button>
</div>

@*@if(imgTest != null)
{
    <img src="@imgTest" alt="alt" />
}*@



@code {
    private List<IBrowserFile> files = new();
    private int maxAllowedFiles = 5;
    private Dictionary<string, bool> images = new();
    private static string? baseDirectory;
    private List<string> imagesToDelete = new();
    //private string? imgTest;

    protected override void OnInitialized()
    {
        baseDirectory = Path.Combine(Directory.GetCurrentDirectory(), @"Images");
        if (Directory.Exists(baseDirectory))
        {
            var tempImg = Directory.GetFiles(baseDirectory, "*.*");
            foreach (var img in tempImg)
            {
                images.Add(img.Substring(baseDirectory.Length + 1), false);
            }
        }
        base.OnInitialized();
    }
    protected override Task OnInitializedAsync()
    {

        return base.OnInitializedAsync();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        files.Clear();
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                byte[] fileContent = new byte[4];
                using (var stream = file.OpenReadStream(file.Size)) {
                    await stream.ReadAsync(fileContent, 0, 4);
                }
                var imgType = fileContent.IsImage(file.ContentType);
                if (imgType != Extensions.ImageFormat.unknown)
                {
                    files.Add(file);
                    //fileContent = new byte[file.Size];
                    //using (var stream = file.OpenReadStream(file.Size))
                    //{
                    //    await stream.ReadAsync(fileContent, 0, (int)file.Size);
                    //}
                    //imgTest = $"data:image/{imgType};base64,{Convert.ToBase64String(fileContent)}";
                }
                else
                    throw new Exception("not allowed format");
            }
            catch //(Exception ex)
            {
                //Console.WriteLine(ex.ToString());
            }
        }
        await Task.CompletedTask;
    }
    private async Task UploadSubmit()
    {
        int maxFileSize = 3 * 1024 * 1024; //3MB max size

        if (files.Count > 0 && baseDirectory != null)
        {
            foreach (var file in files)
            {
                int error = 0;
                try
                {
                    string name = file.Name.Replace(" ", "");

                    error--;
                    Regex reg = new Regex(@"^[\w\-. ]+$");
                    if (!reg.IsMatch(name))
                        throw new Exception();

                    error--;
                    if (file.Size > maxFileSize)
                        throw new Exception();

                    string[] extensions = new string[]
                    {
                        ".jpg",
                        ".jpeg",
                        ".gif",
                        ".png"
                    };
                    error--;
                    bool test = false;
                    foreach(var ext in extensions)
                    {
                        string fileExtension = Path.GetExtension(name);
                        if (fileExtension.Equals(ext, StringComparison.OrdinalIgnoreCase))
                            test = true;
                    }
                    if (!test)
                        throw new Exception("bad extension.");

                    error--;
                    string fileName = $"{DateTime.Now.ToString("yyyyMMddHHmmssfffffff")}-{name}";
                    error--;
                    await using FileStream fs = new($"{baseDirectory}\\{fileName}", FileMode.Create);
                    error--;
                    await using var stream = file.OpenReadStream(maxFileSize);

                    
                    //test = false;
                    //using (MemoryStream ms = new MemoryStream())
                    //{
                    //    byte[] buffer = new byte[maxFileSize];
                    //    int read;
                    //    while ((read = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                    //    {
                    //        ms.Write(buffer, 0, read);
                    //    }
                    //    if (ms.ToArray().IsImage())
                    //    {
                    //        test = true;
                    //    } else
                    //    {
                    //        throw new Exception("file is not an image");
                    //    }
                    //}
                    //if (test)
                    //{
                        error--;
                        await stream.CopyToAsync(fs);
                        error--;
                        images.Add(fileName, false);
                    //}
                }
                catch //(Exception ex)
                {
                    //Console.WriteLine($"{ex.ToString()} code_error: {error}");
                }
            }
            files.Clear();
        }
        await Task.CompletedTask;
    }
    private void MarkImage(string imgName)
    {
        if (imagesToDelete.Contains(imgName))
        {
            imagesToDelete.Remove(imgName);
            images[imgName] = false;

        }
        else
        {
            imagesToDelete.Add(imgName);
            images[imgName] = true;
        }
    }
    private void DeleteImages()
    {
        if (imagesToDelete.Count > 0 && baseDirectory != null)
        {
            foreach (var img in imagesToDelete)
            {
                string path = $"{baseDirectory}\\{img}";
                try
                {
                    images.Remove(img);
                    File.Delete(path);
                }
                catch { }
            }
        }
    }

}
