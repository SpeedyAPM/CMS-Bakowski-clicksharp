@attribute [Route(AppUrls.Admin.EN.ManageUsers)]
@attribute [Route(AppUrls.Admin.PL.ZarzadzajUzytkownikami)]
@inject AuthenticationStateProvider customStateProvider
@inject NavigationManager UriHelper
@inject ClickSharpContext _context

<EditForm Model="_userForm" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-outline mb-4">
        <InputText type="email" id="emailForm" class="form-control form-control-lg" @bind-Value="_userForm.Email" disabled />
        <label class="form-label" for="emailForm">Email address</label>
    </div>
    <div class="form-outline mb-4">
        <InputText type="password" id="passwordForm" class="form-control form-control-lg" @bind-Value="_userForm.Password" disabled />
        <label class="form-label" for="passwordForm">Password</label>
    </div>
    <div>
        @foreach(var role in _userForm.Roles)
        {
            <p>
                        <label>
            @role.Name
            <InputCheckbox @bind-Value="role.IsSet" />
        </label>
            </p>
        }
    </div>
    <button type="submit" class="btn btn-primary btn-lg btn-block" disabled>Add new User</button>

</EditForm>

@code {
    private UserForm _userForm = new();

    protected override void OnInitialized()
    {



        foreach(var item in AppRoles.GetList)
        {
            UserForm.RoleForm role = new UserForm.RoleForm
                {
                    Name = item
                };
            _userForm.Roles.Add(role);
        }
        
        base.OnInitialized();
    }

    private async Task HandleValidSubmit()
    {
        
        await Task.Delay(1000);
        UriHelper.NavigateTo(AppUrls.Admin.EN.DashBoard);
    }

}