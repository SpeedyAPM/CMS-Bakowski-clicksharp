@inherits MenuBase
@using ClickSharp.Models.Data
@using ClickSharp.Components
@using System.Linq
@using ClickSharp.Helpers
@implements IDisposable



<ul ondragover="event.preventDefault()" draggable="false" class="list-group list-group-flush" style="min-width:100px;">
    @if (items.Count > 0)
                {
                    string isActive;
                    isActive = (IsActive == 0) ? "bg-success" : "";
                    <li ondragover="event.preventDefault()" @ondragenter="()=>OnDragEnter(0)" @ondragleave=OnDragLeave @ondrop="()=>OnDrop(0)"
                    class="list-group-item drop-space @isActive" style="">
                        &nbsp;
                    </li>
        @for (int i = 0; i < items.Count; i++)
                    {
            <MenuItem MenuData="@items[i]" @bind-Item=DragItem ExecuteParentRefreshFromChild="ParentRefresh" />
                        var currentIndex = i + 1;
                        isActive = (IsActive == currentIndex) ? "bg-success" : "";
                        <li ondragover="event.preventDefault()" @ondragenter="()=>OnDragEnter(currentIndex)" @ondragleave=OnDragLeave @ondrop="()=>OnDrop(currentIndex)"
                            class="list-group-item drop-space @isActive" style="">&nbsp;</li>
                    }
                }
                else
                {
                    string isActive;
                    isActive = (IsActive == 0) ? "bg-success" : "";
                    <li ondragover="event.preventDefault()" class="list-group-item drop-space @isActive" draggable="false" @ondragenter="()=>OnDragEnter(0)" @ondragleave=OnDragLeave style="" @ondrop="()=>OnDrop(0)">
                        &nbsp;
                    </li>
                }
            </ul>

                        <div class="row">
    <div @ondrop=DropBack style="width:290px;height:30px;" class="col-6 bg-warning text-center" ondragover="event.preventDefault()">
        drop here to exclude from menu
    </div>
    <div @ondrop=DeleteItem style="width:290px;height:30px;" class="col-6 bg-danger text-center" ondragover="event.preventDefault()">
        drop here to delete item
    </div>
            </div>

            <h2>Not included items</h2>

@foreach (var element in elementsToDrag)
{
    <ul ondragover="event.preventDefault()" draggable="false" class="list-group list-group-flush" style="min-width:100px;">
    <ClickSharp.Components.MenuDragOnlyItem @bind-Item=DragItem MenuData="element" />
    </ul>
}



@code {
    private async void DropBack()
    {
        if (DragItem != null)
        {
            _FIRED_METHOD = true;
            Menu? dbMenuItem = dbContext?.Menu?.FirstOrDefault(x => x.Id == DragItem.Id);
            if (dbMenuItem != null)
            {
                dbMenuItem.Index = 0;
                dbMenuItem.ParentId = null;
                items.Remove(DragItem);
                for (int i = 0; i < items.Count; i++)
                {
                    Menu? dbItem = dbContext?.Menu?.FirstOrDefault(x => x.Id == items[i].Id);
                    if (dbItem != null)
                    {
                        dbItem.Index = i;
                    }
                }
                await dbContext?.SaveChangesAsync();
                DragItem = null;
                IsActive = null;
                //ReloadItems();
                await _state.MenuStateHasChanged();
                if (_state.Items.ContainsKey(0))
                    items = _state.Items[0];
                if (_state.Items.ContainsKey(-1))
                    elementsToDrag = _state.Items[-1];
                StateHasChanged();
            }
            _FIRED_METHOD = false;
        }
        DragItem = null;
        IsActive = null;
        _LOCK = false;
    }
    private async void DeleteItem()
    {
        if (DragItem != null)
        {
            _FIRED_METHOD = true;
            Menu? dbMenuItem = dbContext?.Menu?.FirstOrDefault(x => x.Id == DragItem.Id);
            if (dbMenuItem != null)
            {
                dbContext?.Menu?.Remove(dbMenuItem);
                await dbContext?.SaveChangesAsync();
                DragItem = null;
                IsActive = null;
                //ReloadItems();
                await _state.MenuStateHasChanged();
                if (_state.Items.ContainsKey(0))
                    items = _state.Items[0];
                if (_state.Items.ContainsKey(-1))
                    elementsToDrag = _state.Items[-1];
                StateHasChanged();
            }
            _FIRED_METHOD = false;
        }
        DragItem = null;
        IsActive = null;
        _LOCK = false;
    }

    protected override void OnInitialized()
    {
        //elementsToDrag.Clear();

        base.OnInitialized();
        _state.OnChange += StateHasChanged;
        MenuData = new MenuModel
            {
                DisplayName = "MAIN",
                Id = 0,
                Index = 0,
                PageId = 0,
                ParentId = null
            };
        //    items.Add(new MenuModel
        //        {
        //            Id = 0,
        //            Index = 1,
        //            DisplayName = "one"
        //        });
        //    items.Add(
        //new MenuModel
        //    {
        //        Id = 1,
        //        Index = 2,
        //        DisplayName = "two"
        //    });
        //    items.Add(
        //    new MenuModel
        //        {
        //            Id = 2,
        //            Index = 3,
        //            DisplayName = "three"
        //        });


        //ReloadItems();

    }
    protected override async Task OnInitializedAsync()
    {
        await _state.MenuStateHasChanged();
        if(_state.Items.ContainsKey(0))
            items = _state.Items[0];
        if(_state.Items.ContainsKey(-1))
            elementsToDrag = _state.Items[-1];
        await base.OnInitializedAsync();
    }
    protected override void ReloadItems()
    {

        //elementsToDrag.Clear();
        //items.Clear();

        //if (dbContext.Menu != null)
        //{
        //    List<Menu>? menu = dbContext.Menu.Where(x => x.ParentId == 0 || x.ParentId == null).OrderBy(x => x.Index).ToList();

        //    if(menu != null)
        //    {
        //        menu.RemoveAll(x => x.Id == 0);
        //        foreach (var item in menu)
        //        {
        //            if (item.ParentId == 0)
        //            {
        //                items.Add(
        //                    new MenuModel
        //                        {
        //                            Id = item.Id,
        //                            Index = item.Index,
        //                            DisplayName = item.DisplayName,
        //                            PageId = item.PageId,
        //                            ParentId = item.ParentId
        //                        });
        //            }
        //            else
        //            {

        //                elementsToDrag.Add(
        //                    new MenuModel
        //                        {
        //                            Id = item.Id,
        //                            Index = item.Index,
        //                            DisplayName = item.DisplayName,
        //                            PageId = item.PageId,
        //                            ParentId = item.ParentId
        //                        }
        //                    );
        //            }
        //        }
        //    }
        //}
    }
    //protected override void OnInitialized()
    //{
    //    base.OnInitialized();
    //    _state.OnChange += StateHasChanged;
    //}
    public void Dispose()
    {
        _state.OnChange -= StateHasChanged;
    }
}
