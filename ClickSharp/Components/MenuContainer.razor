@inherits MenuBase
@using ClickSharp.Models.Data
@using ClickSharp.Components
@using System.Linq
@using ClickSharp.Helpers
@inject ClickSharpContext dbContext



<header class="text-bg-dark">
    <nav class="navbar navbar-expand-md navbar-dark bg-dark container">
        <a class="navbar-brand" href="/">ClickSharp</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNavDropdown">
            <ul ondragover="event.preventDefault()" draggable="false" class="navbar-nav">
                @if (items.Count > 0)
                {
                    string isActive;
                    isActive = (IsActive == 0) ? "bg-success" : "";
                    <li ondragover="event.preventDefault()" @ondragenter="()=>OnDragEnter(0)" @ondragleave=OnDragLeave @ondrop="()=>OnDrop(0)"
                    class="text-white @isActive" style="width:10px;">
                        &nbsp;
                    </li>
                    @for (int i = 0; i < items.Count; i++)
                    {
                        <MenuItem MenuData="@items[i]" @bind-Item=_item />
                        var currentIndex = i + 1;
                        isActive = (IsActive == currentIndex) ? "bg-success" : "";
                        <li ondragover="event.preventDefault()" @ondragenter="()=>OnDragEnter(currentIndex)" @ondragleave=OnDragLeave @ondrop="()=>OnDrop(currentIndex)"
                    class="text-white @isActive" style="width:10px;">&nbsp;</li>
                    }
                }
                else
                {
                    <li ondragover="event.preventDefault()" draggable="false" style="width:100%; height:30px" @ondrop="()=>OnDrop(0)">
                        &nbsp;
                    </li>
                }
            </ul>
        </div>
    </nav>
</header>


@foreach (var element in elementsToDrag)
{
    <ClickSharp.Components.MenuItem @bind-Item=_item MenuData="element" />
}

<div @ondrop=DropBack style="width:290px;height:30px;" class="bg-danger text-center" ondragover="event.preventDefault()">
    drop here to exclude from menu
</div>
<div @ondrop=DeleteItem style="width:290px;height:30px;" class="bg-warning text-center" ondragover="event.preventDefault()">
    drop here to delete item
</div>

@code {
    private void DropBack()
    {
        if (_item != null)
        {
            Menu? dbMenuItem = dbContext?.Menu?.FirstOrDefault(x => x.Id == _item.Id);
            if (dbMenuItem != null)
            {
                dbMenuItem.Index = 0;
                dbMenuItem.ParentId = null;
                items.Remove(_item);
                for (int i = 0; i < items.Count; i++)
                {
                    Menu? dbItem = dbContext?.Menu?.FirstOrDefault(x => x.Id == items[i].Id);
                    if (dbItem != null)
                    {
                        dbItem.Index = i;
                    }
                }
                dbContext?.SaveChanges();
                _item = null;
                IsActive = null;
                ReloadItems();
                StateHasChanged();
            }
        }
    }
    private void DeleteItem()
    {
        if (_item != null)
        {
            Menu? dbMenuItem = dbContext?.Menu?.FirstOrDefault(x => x.Id == _item.Id);
            if (dbMenuItem != null)
            {
                dbContext?.Menu?.Remove(dbMenuItem);
                dbContext?.SaveChanges();
                _item = null;
                IsActive = null;
                ReloadItems();
                StateHasChanged();
            }
        }
    }

    protected override void OnInitialized()
    {
        elementsToDrag.Clear();
        MenuData = new MenuModel
            {
                DisplayName = "MAIN",
                Id = 0,
                Index = 0,
                PageId = 0,
                ParentId = null
            };
        //    items.Add(new MenuModel
        //        {
        //            Id = 0,
        //            Index = 1,
        //            DisplayName = "one"
        //        });
        //    items.Add(
        //new MenuModel
        //    {
        //        Id = 1,
        //        Index = 2,
        //        DisplayName = "two"
        //    });
        //    items.Add(
        //    new MenuModel
        //        {
        //            Id = 2,
        //            Index = 3,
        //            DisplayName = "three"
        //        });


        ReloadItems();

        base.OnInitialized();
    }
    protected override void ReloadItems()
    {

        elementsToDrag.Clear();
        items.Clear();

        if (dbContext.Menu != null)
        {
            List<Menu> menu = dbContext.Menu.Where(x => x.DisplayName != "MAIN").OrderBy(x => x.Index).ToList();

            foreach (var item in menu)
            {
                if (item.ParentId == 0)
                {
                    items.Add(
                        new MenuModel
                            {
                                Id = item.Id,
                                Index = item.Index,
                                DisplayName = item.DisplayName,
                                PageId = item.PageId,
                                ParentId = item.ParentId
                            });
                }
                else
                {

                    elementsToDrag.Add(
                        new MenuModel
                            {
                                Id = item.Id,
                                Index = item.Index,
                                DisplayName = item.DisplayName,
                                PageId = item.PageId,
                                ParentId = item.ParentId
                            }
                        );
                }
            }
        }
    }
}
